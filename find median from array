//5. Given a sorted array of integers, implement a function that returns the median of the array.
fn find_median(sorted_array: &[i32]) -> Option<f64> {
    let len = sorted_array.len();
    if len == 0 {
        return None; // No elements in the array
    }
    let middle = len / 2;
    if len % 2 == 0 {
        // Even number of elements, average of the two middle elements
        let middle_left = sorted_array[middle - 1] as f64;
        let middle_right = sorted_array[middle] as f64;
        Some((middle_left + middle_right) / 2.0)
    } else {
        // Odd number of elements, middle element
        Some(sorted_array[middle] as f64)
    }
}
fn main() {    
    let sorted_array_odd = vec![1, 2, 3, 4, 5];
    let sorted_array_even = vec![1, 2, 3, 4, 5, 6];
    if let Some(median_odd) = find_median(&sorted_array_odd) {
        println!("Median of the odd-sized array: {}", median_odd);
    } else {
        println!("The array is empty.");
    }
    if let Some(median_even) = find_median(&sorted_array_even) {
        println!("Median of the even-sized array: {}", median_even);
    } else {
        println!("The array is empty.");
    }
}
 .
